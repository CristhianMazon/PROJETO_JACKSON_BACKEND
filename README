💻 API Backend - Trabalho Acadêmico
Este repositório contém o projeto final da disciplina de Desenvolvimento Backend, focado na construção de uma API RESTful robusta, modular e segura. A aplicação utiliza a stack Node.js com JavaScript, integrada a um banco de dados relacional MySQL, com mapeamento de dados feito por meio do Sequelize.

📌 Objetivo
A API oferece um sistema completo com múltiplas funcionalidades de gestão de e-commerce, incluindo autenticação de usuários, gerenciamento de produtos e categorias, e um sistema de pedidos com controle de estoque e transações. Foi projetada com foco em organização de código, segurança, modularidade e escalabilidade, refletindo a estrutura de um backend de aplicação real.

🛠️ Tecnologias Utilizadas
Tecnologia

Descrição

Necessidade

Node.js

Ambiente de execução de JavaScript no servidor

Obrigatório

Express.js

Framework web para APIs RESTful

Obrigatório

MySQL

Banco de dados relacional

Obrigatório (servidor MySQL, como via XAMPP)

Sequelize

ORM para abstração e manipulação de dados

Obrigatório

bcryptjs

Criptografia de senhas

Obrigatório

jsonwebtoken

Autenticação com tokens seguros (JWT)

Obrigatório

dotenv

Gerenciamento de variáveis de ambiente

Opcional (mas recomendado para segurança e configuração)

Swagger

Documentação interativa da API (via swagger-jsdoc e swagger-ui-express)

Obrigatório

Nodemon

Reinicialização automática do servidor em desenvolvimento

Opcional (para agilizar o desenvolvimento)

📁 Estrutura de Diretórios
📦 PROJETO_JACKSON_BACKEND
 ├── 📁 src
 │   ├── 📁 config/        # Configurações do projeto (conexão com DB)
 │   ├── 📁 controllers/   # Lógica de controle para cada rota (CRUD)
 │   ├── 📁 models/        # Definição das entidades/tabelas do banco de dados (Sequelize)
 │   ├── 📁 middlewares/   # Middlewares como autenticação JWT
 │   ├── 📁 routes/        # Definição das rotas da API, agrupadas por módulo
 │   ├── 📁 docs/          # Configuração e geração da documentação Swagger
 │   ├── 📁 utils/         # Funções auxiliares (ex: script de população do DB)
 │   ├── 📄 app.js         # Configuração principal do Express e middlewares globais
 │   └── 📄 server.js      # Ponto de entrada do servidor, inicia o Express e o DB
 ├── 📄 .env.example       # Exemplo de arquivo de variáveis de ambiente
 ├── 📄 package.json       # Dependências e scripts do projeto
 └── 📄 package-lock.json  # Gerenciamento de dependências

🚀 Como Executar o Projeto
Siga os passos abaixo para configurar e rodar a API em sua máquina local:

Pré-requisitos
Node.js (versão 14 ou superior)

MySQL Server (Recomendado usar o XAMPP para facilitar a instalação do MySQL localmente)

MySQL Workbench (Opcional, mas útil para gerenciar o banco de dados visualmente)

Configuração e Instalação
Clone o Repositório:

git clone https://github.com/CristhianMazon/PROJETO_JACKSON_BACKEND.git
cd PROJETO_JACKSON_BACKEND

Instale as Dependências:

npm install

Configurações do Ambiente (.env):

Crie um arquivo chamado .env na raiz do projeto (na mesma pasta do package.json).

Copie o conteúdo do PORT=..., JWT_SECRET=..., DB_NAME=..., DB_USER=..., DB_PASSWORD=..., DB_HOST=... que você possui em seu arquivo .env.

Exemplo de .env:

PORT=3000
JWT_SECRET=sua_chave_secreta_jwt_bem_longa_e_aleatoria
DB_NAME=api_ecommerce_db
DB_USER=root # ou seu usuário MySQL (ex: api_user)
DB_PASSWORD= # sua senha MySQL (vazia se o root não tiver senha, ou a senha que você configurou)
DB_HOST=localhost

Importante: Ajuste DB_USER e DB_PASSWORD conforme as credenciais do seu MySQL Server.

Iniciar o Servidor MySQL (via XAMPP):

Abra o Painel de Controle do XAMPP.

Clique em "Start" ao lado de MySQL. Certifique-se de que ele esteja rodando (status verde).

Criar o Banco de Dados (Esquema):

Abra o MySQL Workbench.

Conecte-se à sua instância local do MySQL.

No painel Navigator, na seção SCHEMAS, clique com o botão direito e selecione "Create Schema...".

No campo "Schema Name", digite o nome exato que você configurou em DB_NAME no seu .env (ex: api_ecommerce_db).

Clique em "Apply" (duas vezes) e depois em "Finish".

Popular o Banco de Dados:

Execute o script de população para criar as tabelas e inserir dados de exemplo:

npm run populate

Após a execução, você verá a mensagem "Banco populado com sucesso!". As tabelas categories, orders, orderproducts, products, users serão criadas e preenchidas no api_ecommerce_db. Você pode usar o "Refresh Schema" no MySQL Workbench para visualizá-las.

Iniciar o Servidor da API:

npm run dev

O servidor estará rodando na porta especificada no seu .env (padrão: 3000).

Testando a API
Após iniciar o servidor, você pode testar a API de duas formas:

Documentação Interativa com Swagger UI:

Acesse no seu navegador: http://localhost:3000/api-docs

Utilize a interface do Swagger para explorar todos os endpoints.

Para rotas protegidas: Primeiro, use POST /api/auth/login com as credenciais cris@example.com / 123456 para obter um token JWT. Em seguida, clique no botão verde "Authorize" no canto superior direito e insira o token no formato Bearer SEU_TOKEN_AQUI.

Postman (ou ferramenta similar):

Importe suas requisições ou crie-as manualmente.

Você precisará adicionar o cabeçalho Authorization: Bearer SEU_TOKEN_AQUI para as rotas protegidas.

📚 Observações
O projeto está finalizado e todas as funcionalidades principais estão implementadas.

As senhas são criptografadas com bcryptjs e a autenticação é realizada via JWT (JSON Web Tokens), garantindo a segurança das requisições.

Operações críticas como a criação e o cancelamento de pedidos utilizam transações de banco de dados para garantir a integridade dos dados (controle de estoque, associações N:N).

A integridade referencial do banco de dados é mantida através das configurações onDelete nas associações do Sequelize.

Comentários detalhados no código e na documentação Swagger explicam a lógica e o uso de cada endpoint.

🧑‍💻 Autor
Cristhian Silveira Mazon
📧 cristhian.mazon@gmail.com
